#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ki·ªÉm tra v√† s·ª≠a l·ªói c·∫•u h√¨nh ChromaDB
S·ª≠ d·ª•ng: python fix_chroma_config.py
"""

import os
import sys
from dotenv import load_dotenv

def check_environment():
    """Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng"""
    print("üîç Ki·ªÉm tra c·∫•u h√¨nh m√¥i tr∆∞·ªùng...")
    
    load_dotenv()
    
    # Ki·ªÉm tra mode
    mode = os.getenv("CHROMA_MODE", "local").lower()
    print(f"‚úÖ CHROMA_MODE: {mode}")
    
    if mode == "local":
        chroma_dir = os.getenv("CHROMA_DIR", "./chroma_data")
        print(f"‚úÖ CHROMA_DIR: {chroma_dir}")
        
        # Ki·ªÉm tra th∆∞ m·ª•c
        if not os.path.exists(chroma_dir):
            print(f"üìÅ T·∫°o th∆∞ m·ª•c: {chroma_dir}")
            os.makedirs(chroma_dir, exist_ok=True)
        else:
            print(f"‚úÖ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {chroma_dir}")
            
    elif mode == "cloud":
        required_vars = [
            "CHROMA_CLOUD_HOST",
            "CHROMA_CLOUD_API_KEY", 
            "CHROMA_CLOUD_TENANT",
            "CHROMA_CLOUD_DATABASE"
        ]
        
        missing_vars = []
        for var in required_vars:
            value = os.getenv(var)
            if not value:
                missing_vars.append(var)
            else:
                # ·∫®n API key v√¨ l√Ω do b·∫£o m·∫≠t
                if var == "CHROMA_CLOUD_API_KEY":
                    print(f"‚úÖ {var}: {'*' * 10}{value[-4:] if len(value) > 4 else '*' * len(value)}")
                else:
                    print(f"‚úÖ {var}: {value}")
        
        if missing_vars:
            print(f"‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {missing_vars}")
            return False
        else:
            print("‚úÖ T·∫•t c·∫£ bi·∫øn cloud ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
            
    return True

def test_chroma_connection():
    """Test k·∫øt n·ªëi ChromaDB"""
    print("\nüîå Test k·∫øt n·ªëi ChromaDB...")
    
    try:
        from dupliapp.repositories.chroma_repository import ChromaTopicsRepository
        
        # Test initialization
        repo = ChromaTopicsRepository()
        print("‚úÖ K·∫øt n·ªëi ChromaDB th√†nh c√¥ng")
        
        # Test stats
        stats = repo.stats()
        print(f"‚úÖ Stats: {stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return False

def fix_common_issues():
    """S·ª≠a c√°c l·ªói th∆∞·ªùng g·∫∑p"""
    print("\nüîß S·ª≠a l·ªói th∆∞·ªùng g·∫∑p...")
    
    # Ki·ªÉm tra ChromaDB version
    try:
        import chromadb
        print(f"‚úÖ ChromaDB version: {chromadb.__version__}")
        
        # Ki·ªÉm tra version c√≥ h·ªó tr·ª£ v2 API kh√¥ng
        version_parts = chromadb.__version__.split('.')
        major = int(version_parts[0])
        minor = int(version_parts[1])
        
        if major > 0 or (major == 0 and minor >= 4):
            print("‚úÖ ChromaDB version h·ªó tr·ª£ v2 API")
        else:
            print("‚ö†Ô∏è ChromaDB version c≈©, khuy·∫øn ngh·ªã upgrade")
            
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra ChromaDB version: {e}")
    
    # Ki·ªÉm tra file .env
    env_file = ".env"
    if not os.path.exists(env_file):
        print(f"üìù T·∫°o file {env_file}...")
        with open(env_file, "w", encoding="utf-8") as f:
            f.write("# ChromaDB Configuration\n")
            f.write("CHROMA_MODE=local\n")
            f.write("CHROMA_DIR=./chroma_data\n")
            f.write("\n# Other configurations\n")
            f.write("HOST=0.0.0.0\n")
            f.write("PORT=8008\n")
            f.write("THRESHOLD=0.7\n")
            f.write("TOPK=3\n")
        print(f"‚úÖ ƒê√£ t·∫°o file {env_file}")
    else:
        print(f"‚úÖ File {env_file} ƒë√£ t·ªìn t·∫°i")

def show_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"""
    print("\nüìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
    print("1. Local Mode (m·∫∑c ƒë·ªãnh):")
    print("   CHROMA_MODE=local")
    print("   CHROMA_DIR=./chroma_data")
    print()
    print("2. Cloud Mode:")
    print("   CHROMA_MODE=cloud")
    print("   CHROMA_CLOUD_HOST=your-host.chromadb.com")
    print("   CHROMA_CLOUD_API_KEY=your-api-key")
    print("   CHROMA_CLOUD_TENANT=your-tenant-id")
    print("   CHROMA_CLOUD_DATABASE=your-database-name")
    print()
    print("3. Test k·∫øt n·ªëi:")
    print("   python test_chroma_modes.py")
    print()
    print("4. Ch·∫°y ·ª©ng d·ª•ng:")
    print("   python run.py")

def main():
    """Main function"""
    print("üöÄ ChromaDB Configuration Fixer")
    print("=" * 50)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    env_ok = check_environment()
    
    # S·ª≠a l·ªói th∆∞·ªùng g·∫∑p
    fix_common_issues()
    
    # Test k·∫øt n·ªëi
    if env_ok:
        connection_ok = test_chroma_connection()
    else:
        connection_ok = False
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä K·∫øt qu·∫£:")
    print(f"   Environment: {'‚úÖ OK' if env_ok else '‚ùå FAIL'}")
    print(f"   Connection: {'‚úÖ OK' if connection_ok else '‚ùå FAIL'}")
    
    if env_ok and connection_ok:
        print("\nüéâ ChromaDB ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng!")
    else:
        print("\n‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ v·ªõi c·∫•u h√¨nh ChromaDB")
        show_help()
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
